// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String
  password     String
  role         Role          @default(CUSTOMER)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  carts        Cart[]
  transactions Transaction[]

  @@map("users")
}

model Book {
  id               String            @id @default(cuid())
  title            String
  author           String?
  description      String?
  price            Decimal           @db.Decimal(10, 2)
  stock            Int               @default(0)
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  carts            Cart[]
  transactionItems TransactionItem[]

  @@map("books")
}

model Cart {
  id        String   @id @default(cuid())
  qty       Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String   @map("book_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, bookId])
  @@map("carts")
}

model Transaction {
  id           String            @id @default(cuid())
  status       TransactionStatus @default(PENDING)
  totalAmount  Decimal           @map("total_amount") @db.Decimal(12, 2)
  paymentRefId String?           @map("payment_ref_id")
  paymentRef   Json?             @map("payment_ref")
  user         User              @relation(fields: [userId], references: [id])
  userId       String            @map("user_id")
  items        TransactionItem[]
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  @@map("transactions")
}

model TransactionItem {
  id            String      @id @default(cuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @map("transaction_id")
  book          Book        @relation(fields: [bookId], references: [id])
  bookId        String      @map("book_id")
  quantity      Int
  price         Decimal     @db.Decimal(10, 2)

  @@map("transaction_items")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
